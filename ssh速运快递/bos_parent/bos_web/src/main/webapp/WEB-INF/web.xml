<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" version="2.5">
  <display-name>bos_web</display-name>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>
  
  <!-- web项目中的web.xml配置监听器等 -->
  
  <!-- 配置spring监听器 -->
  <!-- 该监听器的作用是使得项目启动时就能加载applicationContext.xml配置文件，也就是运行spring的各项配置 -->
  <listener>
        <listener-class>
           org.springframework.web.context.ContextLoaderListener
        </listener-class>
  </listener>

  <context-param>
      <param-name>contextConfigLocation</param-name>
      <!-- 假如不设置路径，就会默认到WEB-INF里面寻找applicationContext.xml配置文件 -->
      <param-value>classpath:applicationContext.xml</param-value>
  </context-param> 
  
  <!-- shiro核心过滤器(配置完核心过滤器之后再去applicationContext.xml中配置过滤器所需要的辅助bean元素。注意该辅助bean的id还要是shiroFilter) -->
	<filter>
		<!-- 上面的名字可以随便起，只要和下面的一致就行 -->
		<filter-name>shiroFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>shiroFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

  <!-- 配置struts核心过滤器(注意他不是监听器，而是过滤器) -->
  <filter>
  	<filter-name>struts</filter-name>
  	<!-- 注意，凡是带class的都是全路径 -->
  	<filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>
  </filter>
  <filter-mapping>
  	<filter-name>struts</filter-name>
  	<!-- 注意下面的通配方式 -->
  	<url-pattern>*.action</url-pattern>
  </filter-mapping>
  <!-- 设置由spring载入的log4j配置文件间隔 -->
  <!-- <context-param>
  	  <param-name>log4jConfigLocation</param-name>
      <param-value>classpath:log4j.properties</param-value>
  </context-param> -->
  <!-- 配置log4j监听器 -->
  <!-- <listener>
  	<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
  </listener> -->
  
  <!-- cxf发布服务。service层发布服务但是却在action中配置cxf的服务端的原因是他和service是一个项目，
  	互相是连通的。而发布的只有service中带@Service注解的部分(注意必须在接口上加注解而不能在实现类上加注解) -->
  <servlet>
  	<servlet-name>cxf</servlet-name>
  	<!-- 确认找没找对类的方法是看类里面有没有/WEB-INF/cxf-servlet.xml变量 -->
  	<servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>cxf</servlet-name>
  	<!-- 也就是当路径的项目名的后面加上service就能查看服务以及服务的说明书 -->
  	<url-pattern>/service/*</url-pattern>
  </servlet-mapping>
  
  
  
</web-app>