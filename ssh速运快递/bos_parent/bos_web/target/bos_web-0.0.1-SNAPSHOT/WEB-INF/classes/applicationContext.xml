<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" 
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:jaxws="http://cxf.apache.org/jaxws"
	xsi:schemaLocation="
						http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
						http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
						http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
						http://www.springframework.org/schema/data/jpa 
						http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
						http://cxf.apache.org/jaxws 
						http://cxf.apache.org/schemas/jaxws.xsd">

	<!-- 连接池 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="oracle.jdbc.driver.OracleDriver" />
		<property name="jdbcUrl" value="jdbc:oracle:thin:@192.168.91.128:1521:ORCL" />
		<property name="user" value="bos64" />
		<property name="password" value="root" />
	</bean>
	<!-- 下面是mysql的连接池配置方式 -->
	<!-- <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="com.mysql.jdbc.Driver" />
		<property name="jdbcUrl" value="jdbc:mysql:///test" />
		<property name="user" value="root" />
		<property name="password" value="root" />
	</bean> -->
	
	<!-- spring整合JPA -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="com.itheima.domain,com.itheima.system" />
		<!-- 指定持久层提供者为Hibernate -->
		<property name="persistenceProvider">
			<bean class="org.hibernate.ejb.HibernatePersistence" />
		</property>
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<!-- 自动建表 -->
				<property name="generateDdl" value="true" />
				<property name="database" value="ORACLE" />
				<property name="databasePlatform" value="org.hibernate.dialect.Oracle10gDialect" />
				<property name="showSql" value="true" />
			</bean>
		</property>
		<property name="jpaDialect">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" />
		</property>
	</bean>
	
	<!-- 事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>
	
	<!-- 组件扫描 @Server @Controller @Repository -->
	<!-- 注意不能扫描dao，否则dao不会使用 spring data jpa-->
	<context:component-scan base-package="com.itheima.service,com.itheima.action,com.itheima.before.user"/>
	
	<!-- 事务注解支持 -->
	<!-- 在用注解的方式进行权限控制之后需要加上proxy-target-class属性，因为事务注解可以用jdk或者cglib的方式进行反射，
	但是权限控制注解只能用cglib的方式进行反射，所以显式规定事务注解也用cglib的方式进行反射 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
	
	<!-- 整合 spring data jpa -->
	<jpa:repositories base-package="com.itheima.dao" />
	
	<!-- 让spring容器创建cxf代理对象 -->
	<!-- address从说明书中复制粘贴 -->
	<!-- id只有在new的时候才能用的上，此处是用不上的。但是用不上也不能删，删了就报错 -->
	<!-- 注意，服务端和客户端都要在applicationContext.xml中配置cxf，并且客户端是bos_web而不是domain_customer -->
	<jaxws:client id="customerService" 
	address="http://localhost:8888/crm/service/crm" 
	serviceClass="com.itheima.customerService.CustomerService"></jaxws:client>
	
	<!-- 服务端发布接口类型的服务 -->
	<!-- 注意，服务的服务端不再有implememtor属性或者serviceBean属性，而是变成了子元素中设置 -->
	<!-- id属性其实没什么用，不写也行。address用于用控制台下载接口以及查看说明书时的路径 -->
	<!-- 注意，address属性的第一个字符必须是/，否则无法访问和查看说明书。会报404错误 -->
	<jaxws:server id="webService" address="/web" >
		<jaxws:serviceBean>
			<!-- bean的属性值是要发布的服务(service类名)(为了看起来好看将他设置成了@Service注解的内容，毕竟一般用首字母小写的接口名称，而类名带Impl) -->
			<!-- 注意，此处的bean属性和上面的id属性不能重名 -->
			<ref bean="orderService"/>
		</jaxws:serviceBean>
	</jaxws:server>
	
	<!-- 配置shiro所需要的辅助bean -->
    
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
    	<!-- 注入安全管理器 -->
    	<property name="securityManager" ref="securityManager"></property>
    	<!-- 注意，路径的前面要加斜杠 -->
    	<!-- 当没有登录时就跳转到登录页面 -->
    	<property name="loginUrl" value="/login.html"></property>
    	<!-- 认证成功时跳转的页面(也就是在刚刚登陆成功时跳转的页面) -->
    	<property name="successUrl" value="/index.html"></property>
    	<!-- 当登陆了但没有权限时就跳转到没有权限的提示页面 -->
    	<property name="unauthorizedUrl" value="/unauthorizedUrl.html"></property>
    	<!-- 配置url拦截器 -->
    	<property name="filterChainDefinitions">
    		<!-- anon表示未认证时可以访问的页面,authc表示认证成功以后可以访问的页面，*表示后面还有内容 -->
    		<!-- value本来是属性，但是内容太多就写成了子元素的形式 -->
    		<value>
    			/css/* = anon
    			/images/* = anon
    			/js/* = anon
    			/user_login.action* = anon
    			/validatecode.jsp* = anon
    			/** = authc
    		</value>
    	</property>
    </bean>
    <!-- 配置安全管理器(用于注入到上面的辅助bean) -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
    	<!-- 引入自定义的realm -->
    	<property name="realm" ref="realm"></property>
    	<!-- 将ehcache交给安全管理器 -->
		<property name="cacheManager" ref="cacheManager"></property>
    </bean>
    
    <!-- 配置一个CacheManager对象 -->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:ehcache.xml"></property>
	</bean>
    
    <!-- 定义自定义的realm -->
    <bean id="realm" class="com.itheima.realm.CustomRealm"></bean>
    
    <!-- 开启shiro注解模式 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator">
    	<!-- 强制使用cglib方式创建代理 -->
		<property name="proxyTargetClass" value="true"></property>
	</bean>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"></bean>
	
</beans>