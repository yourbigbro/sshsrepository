做过哪些优化？有什么可以分享的？
mysql慢查询优化：在配置文件my.ini中配置慢查询优化，当超过规定的秒数没有查询出来就记录到日志。
还可以在my.ini中添加参数记录下没有使用索引的查询。
mysql有两种存储引擎，innodb和myisam。
对于myisam，可以
1.对于非空表插入数据之前禁用索引，插入之后再开启索引，可以提高插入数据的速度。对于空表插入数据则不用，因为会在插入数据之后再建立索引。
2.插入数据之前禁用唯一性检查，插入数据之后开启唯一性检查。
3.批量插入数据
对于innodb，可以：
1.禁用唯一性检查
2.插入数据之前执行禁止对外键的检查，数据插入完成后再恢复，可以提供插入速度。
3.插入数据之前执行禁止事务的自动提交，数据插入完成后再恢复，可以提高插入速度。
可以优化表结构：
1.将字段定义为not null便于索引
2.在够用的情况下尽量将数据设置的小一点，例如设置为int而不是long
3.表单字段数量不要太多，20以内
表拆分：
1.垂直拆分：将常用的列和不常用的列拆成不同的表，但是需要外键关联，冗余字段，查询时需要用join。可以查询两次，这样就避免了用join。
2.水平拆分：每天新建一张表，插入十分迅速。但是查询性能不高。
读写分离（分为读数据库和写数据库，是主从关系）和数据库集群（用mycat管理节点并负责负载均衡）

arraylist和linkedlist使用场景有什么区别？linkedlist是单向链表还是双向链表？
linkedlist是双向链表。
前者查询后者增删，不确定的情况下用arraylist。

map的原理？哈希桶是什么结构？技术实现是怎样的？
map是一个键值对，可以用键找到对应的值，其中键必须唯一。
哈希桶是一个链表。哈希表中每个位置可能有冲突的多种元素，这些元素经过equals计算如果没有重复的就会放入哈希桶中。当查找的时候先根据hashcode方法进入哈希桶在根据equals方法寻找某个元素。

java序列化了解吗？为什么要序列化？序列化就不会丢失了吗？程序里一般也不序列化，很少用，什么情况下才必须要序列化？
序列化就是将对象变成可存储或者传输的字节流，可以通过反序列化进行读取。不同项目之间传输对象信息需要序列化（比如项目之间传递pojo），需要将对象保存到磁盘中时也需要序列化（比如服务器关闭时的session）。

synchronized关键字的理解？
synchronized可以锁方法或代码块。锁代码块是锁对象是自己规定的，锁非静态方法时锁对象是this，所静态方法时锁对象是该类的字节码文件。

线程池、并发包了解吗？
线程池是什么，作用，分为几种，实际应用场景比如数据库连接池。
并发包：jdk1.5之后加入了用于多线程编程的java.util.concurrent并发包，里面有很多用于多线程编程的类可以直接使用，从而不用再手写原始的多线程代码。

AOP的实现原理？
。。。
spring的事务传播级别有哪些？
spring事务的传播级别有七种，常用的有requeted和supports。（隔离级别有四种，读未提交，不可重复读，可重复读，串行化）

autowired和resource的区别？
1、@Autowired与@Resource都可以用来装配bean. 都可以写在字段上,或写在setter方法上。 
2、@Autowired默认按类型装配（这个注解是属业spring的），默认情况下必须要求依赖对象必须存在，如果要允许null 值，可以设置它的required属性为false，如：@Autowired(required=false) ，如果我们想使用名称装配可以结合@Qualifier注解进行使用，如下： 
    @Autowired() @Qualifier("baseDao")     
    private BaseDao baseDao;    
 3、@Resource（这个注解属于J2EE的），默认安照名称进行装配，名称可以通过name属性进行指定， 
如果没有指定name属性，当注解写在字段上时，默认取字段名进行按照名称查找，如果注解写在setter方法上默认取属性名进行装配。 当找不到与名称匹配的bean时才按照类型进行装配。但是需要注意的是，如果name属性一旦指定，就只会按照名称进行装配。
    @Resource(name="baseDao")     
    private BaseDao baseDao; 

springMVC的原理？

这道题大概是应该回答springmvc的执行流程。
1、  用户发送请求至前端控制器DispatcherServlet。
2、  DispatcherServlet收到请求调用HandlerMapping处理器映射器。
3、  处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。
4、  DispatcherServlet调用HandlerAdapter处理器适配器。
5、  HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器)。
6、  Controller执行完成返回ModelAndView。
7、  HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet。
8、  DispatcherServlet将ModelAndView传给ViewReslover视图解析器。
9、  ViewReslover解析后返回具体View。
10、DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。
11、 DispatcherServlet响应用户。

servlet,filter,inteceptor的区别？如果都配置的话，谁先执行？
执行顺序为filter过滤器---interceptor拦截器（或者拦截器链）---servlet。
他们的区别是filter决定哪个请求路径进入struts，拦截器在请求进入serlet进行执行之前进行校验（以切面的形式进行校验），比如校验用户是否登录。拦截器链执行完毕并且都成功能执行之后进入servlet执行业务逻辑。

maven的生命周期有哪些？maven怎么配置多环境？

Maven有三套相互独立的生命周期，请注意这里说的是“三套”，而且“相互独立”，初学者容易将Maven的生命周期看成一个整体，其实不然。这三套生命周期分别是：
    Clean Lifecycle 在进行真正的构建之前进行一些清理工作。
    Default Lifecycle 构建的核心部分，编译，测试，打包，部署等等。
    Site Lifecycle 生成项目报告，站点，发布站点。
我再次强调一下它们是相互独立的，你可以仅仅调用clean来清理工作目录，仅仅调用site来生成站点。当然你也可以直接运行 mvn clean install site 运行所有这三套生命周期。

我们在开发项目的时候，往往会有好几个环境。比如开发、预发布（测试）、产品，每个环境一般用到配置都不一样，最典型的就是数据库，开发的数据库与产品的数据库肯定是不一样的，如果要多个环境的切换就得改配置，这样一来非常麻烦。
使用的开发工具为idea，一般来说我们都会在src/main/resources 目录下面建一个文件夹，里面分别放三个环境对应的文件dev、pre、pro，我们实际项目中引用的配置文件是config.properties，把在config.properties文件中所有用到的变量都放到对于环境的文件夹中，做好上面的准备工作之后，就需要在pom里面进行设置了三个环境对应的变量（也就是profile元素），以及在<build>节点里面添加：
<!-- 使用指定的filter进行过滤，在执行mvn命令的时候带上-Ppro就代表生产环境，就会加载生产环境的properties，-Pdev就代表开发环境（默认） -->
        <filters>
            <filter>src/main/resources/properties/env/${env}.properties</filter>
        </filters>

setNx这个命令是干吗用的？
该命令用来实现分布式锁。
命令格式：SETNX key value
作用是将 key 的值设为 value，当且仅当 key 不存在。若给定的 key 已经存在，则 SETNX 不做任何动作。
SETNX 是SET if Not eXists的简写。

MQ什么情况下用？activeMQ的原理是什么？
mq的应用场景：消息队列中间件是分布式系统中的重要组件，主要解决应用耦合，异步消息，流量削锋等问题，提高性能。

分布式锁的技术细节？

Zk分布式锁实现原理。
分布式锁获取思路
??????? 获取分布式锁的总体思路
??????? 在获取分布式锁的时候在locker节点下创建临时顺序节点，释放锁的时候删除该临时节点。客户端调用createNode方法在locker下创建临时顺序节点，
然后调用getChildren(“locker”)来获取locker下面的所有子节点，注意此时不用设置任何Watcher。客户端获取到所有的子节点path之后，如果发现自己在之
前创建的子节点序号最小，那么就认为该客户端获取到了锁。如果发现自己创建的节点并非locker所有子节点中最小的，说明自己还没有获取到锁，
此时客户端需要找到比自己小的那个节点，然后对其调用exist()方法，同时对其注册事件监听器。之后，让这个被关注的节点删除，则客户端的Watcher会
收到相应通知，此时再次判断自己创建的节点是否是locker子节点中序号最小的，如皋是则获取到了锁，如果不是则重复以上步骤继续获取到比自己小的一个
节点并注册监听。当前这个过程中还需要许多的逻辑判断。

写两个递归方法：
1+2+3+……+N

public int digui(int n){

   if(n>1){

           digui（n-1）+n;

          }else{
                 return 1;

               }

}

裴波那契数列通项公式

斐波那契数列：1、1、2、3、5、8、13、21、…… 
这个数列从第3项开始，每一项都等于前两项之和。
通项公式略。

递归有什么问题？如何规避？
递归的过程中会产生大量的变量，中间值和形参。递归在过深或者死循环时会爆栈或者降低性能。保证递归的深度不是太深，更要避免死循环。

栈内存和堆内存有什么区别？递归为什么都在栈里面存着？
因为递归方法会产生大量的参数和返回值。

中间件用过哪些？dubbo有什么问题？
activemq消息中间件，dubbo服务中间件。
Dubbo只是实现了服务治理（注册 发现等），没有其他功能；dubbo长时间没有人维护。












