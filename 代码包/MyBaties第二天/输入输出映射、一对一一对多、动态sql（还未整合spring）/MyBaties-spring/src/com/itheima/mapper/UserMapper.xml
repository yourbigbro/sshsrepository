<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace：命名空间，用于隔离sql，还有一个很重要的作用，后面会讲 -->
<!-- parameterType指的是输入的参数的类型，resultType指的是返回数据的类型 -->
<mapper namespace="com.itheima.mapper.UserMapper" >

	<!-- 根据id查询用户 -->
	<select id="queryUserById" parameterType="Integer" resultType="com.itheima.domain.User">
		select * from user where id = #{id}
	</select>
	
	<!-- 在下面的两种模糊查询方法中，{}中写value一定是没错的。前面方法的随意，但后面的方法不写value容易出错 -->
	
	<!-- 根据用户名模糊查询用户(第一种方式) -->
	<!-- 该种方式可以防止sql注入，括号里面可以是简单类型的值或pojo属性值。如果parameterType是单个简单类型的值，则括号中可以是任意值 -->
	<select id="queryUserByUsername1" parameterType="String" resultType="com.itheima.domain.User">
		select * from user where username like #{username}
	</select>
	
	<!-- 根据用户名模糊查询用户(第二种方式)。这种方法不用，因为不能防止sql注入 -->
	<!-- 括号中可以是简单类型的值或pojo属性值。如果parameterType是单个简单类型的值，则括号中只能是value -->
	<select id="queryUserByUsername2" parameterType="String" resultType="com.itheima.domain.User">
		select * from user where username like '%${value}%'
	</select>
	
	<!-- 添加用户 -->
	<!-- 因为没有返回值，所以没有resultType属性。parameterType参数为pojo全路径 -->
	<insert id="saveUser" parameterType="com.itheima.domain.QueryVo">
	
		<!-- keyColumn代表数据库行，keyProperty代表pojo中的属性，resultType代表属性的类型，order代表是插入之后查询还是插入之前查询id -->
		<selectKey keyColumn="id" keyProperty="user.id" resultType="Integer" order="BEFORE">
			<!-- 注意，last_insert_id是mysql的函数的名字，所以后面必须加括号。不过函数大小写都行 -->
			select last_insert_id()
			<!-- 假如需要uuid形式的主键的话可以用select uuid()并将order改成AFTER并将resultType改成String。但是此处不能改，因为pojo实体类中主键已经是Integer了 -->
		</selectKey>
	
		<!-- 注意，value后面的参数必须是pojo的属性名，因为传入的参数是整个的user对象，不写pojo属性做参数的话就无法从构造的实体类对象中取得参数 -->
		insert into user (username,birthday,sex,address) values (#{user.username},#{user.birthday},#{user.sex},#{user.address})
	</insert>
	
	<!-- 修改用户。元素名是update -->
	<update id="updateUser" parameterType="com.itheima.domain.QueryVo">
		update user set username = #{user.username} where id = #{user.id}  
	</update>
	
	<!-- 删除用户。删除用户的格式和查询很相似 ，但是没有返回值，并且还要提交事务-->
	<delete id="deleteUser" parameterType="Integer">
		delete from user where id = #{id}
	</delete>
	
	<resultMap type="user" id="userResultMap">
		<result column="id" property="id"/>
		<result column="username" property="username"/>
		<result column="birthday" property="birthday"/>
		<result column="sex" property="sex"/>
		<result column="address" property="address"/>
	</resultMap>
	<!-- 注意，#{sex}外面不加''，%${username}%外面加'' -->
	<select id="findUserByUsernameAndSex" parameterType="user" resultMap="userResultMap">
		select * from user where 1=1
		<if test="username != null and username != ''">and username like '%${username}%'</if>
		<if test="sex != null and sex != ''" >and sex = #{sex}</if>
	</select>
	
	<!-- 进一步使用<where元素> -->
	<select id="findUserByUsernameAndSex1" parameterType="user" resultMap="userResultMap">
		select * from user
		<where>
			<if test="username != null and username != ''">and username like '%${username}%'</if>
			<if test="sex != null and sex != ''" >and sex = #{sex}</if>
		</where>
	</select>
	
	<!-- 进一步提取sql片段 -->
	<sql id="qq">select * from</sql>
	<select id="findUserByUsernameAndSex2" parameterType="user" resultMap="userResultMap">
		<include refid="qq"></include>
		 user
		<where>
			<if test="username != null and username != ''">and username like '%${username}%'</if>
			<if test="sex != null and sex != ''" >and sex = #{sex}</if>
		</where>
	</select>
	
	<!-- 筛选性别为1或2的user对象的集合 -->
	<select id="findUserBySex" parameterType="user" resultMap="userResultMap">
		select * from user where sex in
		<foreach collection="list" separator="," item="item" open="(" close=")">
			#{item}
		</foreach>
	</select>
	
	<!-- 关联映射(一对一查询，使用returnType) -->
	<select id="oneToOneByReturnType" resultType="ordersUser">
		select o.id,o.user_id as userId,o.number,o.createtime,o.note,u.username,u.address from orders o left join user u on o.user_id = u.id
	</select>
	
	<!-- 关联映射(一对一查询，使用returnMap) -->
	<resultMap type="orders" id="ordersResultMap">
		<id column="id" property="id"/>
		<!-- 注意，某个属性映射不到的话并不会报错，而是直接出来的属性为null，即数据库(实体类)字段未被赋值 -->
		<result column="user_id" property="userId"/>
		<result column="number" property="number"/>
		<result column="createtime" property="createtime"/>
		<result column="note" property="note"/>
		<!-- 映射orders里面的user对象 -->
		<association property="user" javaType="user">
			<!-- 必须声明主键 -->
			<id column="id" property="id"/>
			<result column="username" property="username"/>
			<result column="address" property="address"/>
		</association>
	</resultMap>
	<!-- 注意，returnMap不能在sql语句中给字段起别名，属于多此一举。不仅多此一举，还会出错误，导致被其别名的字段无法被映射赋值，值为null -->
	<select id="oneToOneByReturnMap" resultMap="ordersResultMap">
		select o.id,o.user_id,o.number,o.createtime,o.note,u.username,u.address from orders o left join user u on o.user_id = u.id
	</select>
	
	<!-- 关联映射(一对多查询，使用returnMap) -->
	<resultMap type="user" id="userResultMaps">
		<id column="id" property="id"/>
		<result column="username" property="username"/>
		<result column="address" property="address"/>
		<result column="sex" property="sex"/>
		<!-- 区分javaType和ofType -->
		<collection property="orderss" ofType="orders" javaType="list">
			<id column="id" property="id"/>
			<result column="number" property="number"/>
			<result column="createtime" property="createtime"/>
			<result column="note" property="note"/>
		</collection>
	</resultMap>
	<select id="oneToManyByReturnMap" resultMap="userResultMaps">
		select u.username,u.address,u.sex, o.id,o.number,o.createtime,o.note from user u left join orders o on u.id = o.user_id
	</select>
	
</mapper>