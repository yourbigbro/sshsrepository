1、git中远程仓库的内容可以直接拉到eclipse的工作区中，但是eclipse工作区中的内容不能直接提交到git远程仓库，只能先提交到本地仓库。


2、创建git仓库的三种方法：
   1）用命令的方式创建git版本仓库：右键--Git Bash Here--输入git init命令（git版本仓库就是.git隐藏文件）
   2）右键--Git在这里创建版本仓库--在制作纯版本库（没有工作目录）上打钩--确定（没有.git隐藏文件，没有目录，直接就是仓库（也就是.git隐藏文件中的内容））
   3）右键--Git在这里创建版本仓库--不在制作纯版本库（没有工作目录）上打钩--确定（有.git隐藏文件）


3、git操作文件：
   1）将文件添加到git管理：（原理是先将工作区中的内容提交到暂存区，再将暂存区中的内容提交到本地git仓库）在目标文件上右       键--TortoiseGit(T)--添加--文件上出现加号--在文件上右键--Git提交--添加日志信息--确认--文件上出现对号，添加成功
   2）修改文件之后提交到git仓库：在文件上右键--Git提交--添加日志信息--确认
   3）查看日志：在目标文件上右键--TortoiseGit(T)--显示日志
   4）修改之后比较差异：在目标文件上右键--TortoiseGit(T)--比较差异--有加号的代码行就是新增的
   5）将文件还原到上一个版本：在目标文件上右键--TortoiseGit(T)--还原
   6）删除git中管理的文件：
      1）在目标文件上右键--TortoiseGit(T)--删除（同时删除了仓库中的文件和本地文件）
      2）在目标文件上右键--TortoiseGit(T)--删除并保留本地副本--文件上出现叉号（保留了本地文件）


4、git管理java项目：
   不提交bin文件夹，因为里面是编译之后的二进制文件。在bin文件夹上右键--TortoiseGit(T)--删除并添加到忽略列表--bin-递归     忽略文件或目录--.gitignore放在文件/文件夹所在的目录--确定（操作的结果是java项目中出现了一个.gitignore文本文件，里面   是被忽略的   bin文件夹，这使得其他人在提交项目时也无法提交bin文件夹）


5、linux命令ll和ls的区别：
   ll是会显示当前目录下的文档详细信息（包括权限、所属用户和组、大小、时间、名称等），是ls -l的缩写，相当于windows的快   捷方式；ls只显示当前目录下的文档名。


6、打pom包的情形：
                1）管理maven依赖的父工程
                2）聚合工程父工程

   打war包的情形：需要部署tomcat。打war包的工程有web.xml配置文件。

   打jar包的情形：被其他项目引用的情况。可以用排除法，也就是只要既不是pom包又不是war包就是jar包。
总之，从上到下依次是pom,jar,war。


7、创建maven工程的四个步骤：创建工程，添加依赖，配置文件，静态页面。


8、配置tomcat端口号的两个方法：
                             1）pom.xml里面，在build--plugins--plugin元素里面添加configuration元素，再在configuration元素里面添加port和path元素。
                             2）conf文件夹里面的server.xml里面配置


9、SqlMapCofig当配置文件为空时是可以没有的。


10、聚合工程父工程下的子工程会首先汇集到父工程然后再执行，因此配置文件可以随便放，最后总会到父工程里面被所有的工程所用。可以统一放在war工程里面看起来更清晰一些。


11、当使用dubbo之后，@Service注解分为阿里巴巴的注解和spring原生的注解，前者在使用事物时会出问题，所以还是用原生的注解。


12、如果需要跳转页面，就需要走视图解析器，就一定不能加@ResponseBody注解。假如既需要跳转页面又需要将java对象转换成json，那么就要在后台手动将java转换成json，然后封装进model返回前台页面。
    如果需要返回数据，就需要走转换器，就一定要加@ResponseBody注解。
    区分视图解析器和转换器。


13、Maven中是有配置文件的，在conf/settings.xml中。该配置文件中配置了maven仓库的路径。


14、add dependency是添加依赖，add plugin是不知道。。


15、controller层依赖service接口只是使得前者可以调用后者，但仍然会报错，因为需要开启服务前者才能真正调用后者。


16、@ResponseBody注解的作用：
                           1）转换数据类型
                           2）还有避免走视图解析器。因此即使不需要转换数据类型也要加上该注解


17、打包install的顺序：父子关系的只打父包就行了（但是只有maven module的才不需要给子模块打包，maven project的仍然需要给子项目打包），依赖关系的先打包被依赖项目再打包依赖项目。顶级项目也需要打包。


18、使混乱的代码对齐的方法：
                          1）右键--source--format
                          2）ctrl+shift+f


19、加上、去掉注释：ctrl+shift+c


20、alt+shift+j给方法添加注释。光标需要在方法名上。


21、当前台传来的参数只有一个并且是简单数据类型时，用${}时必须是value，用#{}则随意，只要不为空就行。


22、sellect * from `user` where `name` like '%${value}%'中，要注意前面的两个不是单引号。


23、通用mapper的输入参数可以省略，输出参数resultType不能省略。


24、.gitignore中应该忽略的文件为：/target/、.settings、.project、.classpath。
               应该提交的文件夹为：src、pom.xml


25、将eclipse中的项目放入远程git私服的流程为：
                                           1）右键--team--share project（项目上出现了问号，放入了工作空间。此时在git窗口编辑.gitignore配置文件）
                                           2）右键--team--add to index（项目上出现了星号，放入了暂存区）
                                           3）右键--team--commit（项目上出现了柱形，放入本地仓库）
                                           4）右键--team--push branch master（仍然是柱形，放入了远程仓库）


26、将eclipse中git页面中下载好的工程导入到开发界面中的方法：右键--import projects--import as general project--定义工程名--确定。--------但是此时eclipse并不知道这是个什么类型的项目，因此在项目上（前提是这是一个maven项目的话）：右键--configure（这个单词翻译成配置）--convert to maven project。


27、eclipse中的git解决冲突的两种方法：
                                    1）在冲突的类文件上右键--team--merge tool（merge翻译成融入）

                                    2）修改之后在冲突的类文件上右键--team--add to index。这样之后项目上就有了星号，然后再提交到本地仓库，最后再提交到远程仓库即可。


28、git的右键--team中那几个提交和拉取的区别是什么？？？？？？？


29、只有war项目中中有web.xml文件，只有pom项目中有pom.xml文件。tomcat（包括tomcat端口）是配置在pom.xml文件中的。端口的port元素下面还可以设置path元素来控制访问路径，设置了port之后就不能再在访问路径里面加项目名。


30、linux进入文件：vim+文件名。开启编辑：i。退出编辑：esc+ctrl+zz


31、